#summary Speed of deserializing an STRtree on App Engine production

== Introduction ==

We are trying to store STRtrees as serialized files on App Engines file system in our WAR's WEB-INF/ directory. The idea is that a spatial query runs faster against an index, rather than collecting all possible entities and querying each one individually.

Unfortunately, the deserializing process is taking a long time in production

== Logic ==

Here is the basic logic:
  * Create a spatial index (STRtree) offline - our example has 509 discrete multipolygons built with the JTS package
  * Serialize it to disk - we modified JTS to be able to serialize the JTS STRtree index
  * Upload the index as a serialized file as part of WEB-INF/ - the serialized index is 1.26MB
  * In a test servlet, grab the serialized index and deserialize it
  * Create a point known to be in the spatial extent covered by polygons in the index
  * Query the point against the index
  * Report on the polygon in which the point lies

== Timing ==

In development (Mac OSX, Google Plugin for Eclipse 3.5, Google App Engine SDK 1.2.5, Google Web Toolkit SDK 1.7.1), our servlet ran in a reasonable amount of time:

{{{
Begin request

Fetch serialized index
	/galileo/workspace/GisCloud/war/WEB-INF/index.ser
	Creating FileInputStream
	Creating ObjectInputStream
	Elapsed milliseconds to get file: 1

Deserialize index
	Elapsed milliseconds to deserialize index: 1010

Create test point
	Elapsed milliseconds to create test point: 3
	POINT (-111.848953 40.710544)

Query index for point
	Elapsed milliseconds to query index: 1

REPORT:
	The test point was inside multipolygon: MULTIPOLYGON (((-111.843755361566 40.7104458570532, -111.843740604643 40.7098396898185, -111.843754742702 40.7096468035749, -111.843755209004 40.7087459454872, -111.843754749163 40.7081468804064, -111.843655149685 40.7079467178359, -111.84365522716 40.7065458877788, -111.844754974532 40.706546852537, -111.845955312892 40.7065452678921, -111.847055060265 40.7065462107361, -111.848154881562 40.706646236603, -111.850454978761 40.7066464277907, -111.8516553425 40.7066465853956, -111.852525410883 40.7066455672025, -111.853054570325 40.7066461617262, -111.853255180758 40.707245548957, -111.853354910854 40.7075465979351, -111.853555535316 40.7081468852665, -111.853655049752 40.7082452432924, -111.85395532212 40.7090465841696, -111.853955509432 40.7092465724435, -111.854254679638 40.7101461136592, -111.854455224937 40.7106464048967, -111.854554943508 40.7109456510193, -111.854755602253 40.7115468364723, -111.855355976557 40.7129459188962, -111.853654726525 40.7129468033392, -111.853337424574 40.712945546348, -111.852455436136 40.7129466589163, -111.851246594742 40.712940266496, -111.850155120541 40.7129465097568, -111.849055267929 40.7129455975005, -111.847840530274 40.7129410144875, -111.847054494952 40.712946785987, -111.846655503032 40.7129452092982, -111.84595464234 40.7129458441854, -111.845554488828 40.712946073908, -111.844750444463 40.712932142853, -111.844363312877 40.7129322731366, -111.843754959817 40.7129457306824, -111.843755361566 40.7104458570532)))
}}}